from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional
from datetime import datetime, timezone

from pydantic import BaseModel, Field


class TaskType(str, Enum):
    RECON = "recon"
    SCAN = "scan"
    EXPLOIT = "exploit"
    ANALYZE = "analyze"


class Severity(str, Enum):
    INFO = "info"
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"


class Confidence(str, Enum):
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"


class FindingStatus(str, Enum):
    SUSPECTED = "suspected"
    CONFIRMED = "confirmed"


class Target(BaseModel):
    """Pentest target scope for agents.

    Keep intentionally minimal for MVP; safety/scope guards can be layered later.
    """

    base_url: str
    allowed_hosts: List[str] = Field(default_factory=list)
    default_headers: Dict[str, str] = Field(default_factory=dict)
    auth_token: Optional[str] = None
    cookies: Dict[str, str] = Field(default_factory=dict)


class PentestTask(BaseModel):
    """Uniform task handed to an agent by the orchestrator."""

    id: str
    type: TaskType
    target: Target
    urls: List[str] = Field(default_factory=list)
    params: Dict[str, Any] = Field(default_factory=dict)
    hints: Dict[str, Any] = Field(default_factory=dict)
    priority: float = 0.5
    notes: Optional[str] = None
    created_at: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))


class HttpExcerpt(BaseModel):
    """Minimal request/response excerpts for evidence without large payloads."""

    meta: Dict[str, Any] = Field(default_factory=dict)  # method/url/status/etc.
    headers: Dict[str, str] = Field(default_factory=dict)
    body_snippet: Optional[str] = None  # small excerpt only


class Evidence(BaseModel):
    """Evidence captured by a tool or probe."""

    request: Optional[HttpExcerpt] = None
    response: Optional[HttpExcerpt] = None
    payload: Optional[str] = None
    notes: Optional[str] = None
    artifact_path: Optional[str] = None  # e.g., saved response, screenshot


class Finding(BaseModel):
    id: str
    category: str  # e.g., "sqli", "xss", "misconfig", "xxe"
    title: str
    description: Optional[str] = None
    url: Optional[str] = None
    param: Optional[str] = None
    evidence: List[Evidence] = Field(default_factory=list)
    confidence: Confidence = Confidence.LOW
    severity: Severity = Severity.INFO
    status: FindingStatus = FindingStatus.SUSPECTED
    source_tool: Optional[str] = None
    created_at: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))
    updated_at: datetime = Field(default_factory=lambda: datetime.now(timezone.utc))


class AgentMetrics(BaseModel):
    """Lightweight per-run metrics useful to guide evolution later."""

    duration_ms: Optional[float] = None
    requests_made: Optional[int] = None
    signals_found: Optional[int] = None
    tool_invocations: Dict[str, int] = Field(default_factory=dict)


class AgentResult(BaseModel):
    """Standardized output from any agent."""

    task_id: str
    findings: List[Finding] = Field(default_factory=list)
    derived_tasks: List[PentestTask] = Field(default_factory=list)
    logs: List[str] = Field(default_factory=list)
    metrics: AgentMetrics = Field(default_factory=AgentMetrics)


__all__ = [
    "TaskType",
    "Severity",
    "Confidence",
    "FindingStatus",
    "Target",
    "PentestTask",
    "HttpExcerpt",
    "Evidence",
    "Finding",
    "AgentMetrics",
    "AgentResult",
]

