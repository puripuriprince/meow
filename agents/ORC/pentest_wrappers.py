from __future__ import annotations

from typing import Any, Dict, List, Optional, Type

from agent_spawner import BaseAgent, AgentConfig, AgentSpawner

from pentest_schemas import Target, PentestTask, TaskType
from agents.recon import ReconAgent
from agents.scan import ScanAgent
from agents.exploit import ExploitAgent
from agents.analysis import AnalysisAgent
from agents.adapters.common import SimpleCLIToolAdapter


def _ensure_scheme(target: str) -> str:
    if target.startswith("http://") or target.startswith("https://"):
        return target
    return f"http://{target}"


def _serialize_agent_result(ar) -> Dict[str, Any]:
    derived_urls: List[str] = []
    exploit_urls: List[str] = []
    try:
        for t in ar.derived_tasks:
            if getattr(t, "type", None) and t.type.value == "scan":
                derived_urls.extend(t.urls)
            if getattr(t, "type", None) and t.type.value == "exploit":
                exploit_urls.extend(t.urls)
    except Exception:
        pass
    return {
        "success": True,
        "findings": [f.model_dump() for f in ar.findings],
        "context_updates": {
            "findings_count": len(ar.findings),
            "attack_surface": {"urls": list(dict.fromkeys(derived_urls))},
            "exploit_candidates": {"urls": list(dict.fromkeys(exploit_urls))},
        },
        "recommendations": [],
        "logs": ar.logs,
        "metrics": ar.metrics.model_dump(),
    }


class _PentestWrapper(BaseAgent):
    def __init__(self, config: AgentConfig, knowledge_graph_url: str):
        super().__init__(config, knowledge_graph_url)
        self._agent = None  # type: Optional[object]

    def _target_from(self, context: Dict[str, Any]) -> Target:
        base = _ensure_scheme(context.get("target", "http://localhost"))
        return Target(base_url=base)


class ReconWebAgent(_PentestWrapper):
    def __init__(self, config: AgentConfig, knowledge_graph_url: str):
        super().__init__(config, knowledge_graph_url)
        self._agent = ReconAgent(tools=[SimpleCLIToolAdapter(name="ffuf", base_cmd=["ffuf"], default_args=["-s"])])

    async def execute(self, task: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        pt = PentestTask(
            id=task.get("id", "recon"),
            type=TaskType.RECON,
            target=self._target_from(context),
            params={
                "crawl_depth": task.get("crawl_depth", 2),
                "max_urls": task.get("max_urls", 200),
                "concurrency": task.get("concurrency", 10),
                "wordlist": task.get("wordlist"),
            },
        )
        ar = await self._agent.run(pt)
        return _serialize_agent_result(ar)


class ScanWebAgent(_PentestWrapper):
    def __init__(self, config: AgentConfig, knowledge_graph_url: str):
        super().__init__(config, knowledge_graph_url)
        self._agent = ScanAgent(tools=[SimpleCLIToolAdapter(name="sqlmap", base_cmd=["sqlmap"])])

    async def execute(self, task: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        urls = task.get("urls", [])
        # If orchestrator passed recon results into context
        attack_surface = context.get("attack_surface", {})
        if not urls and isinstance(attack_surface, dict):
            urls = attack_surface.get("urls", [])
        pt = PentestTask(
            id=task.get("id", "scan"),
            type=TaskType.SCAN,
            target=self._target_from(context),
            urls=urls,
            params={"concurrency": task.get("concurrency", 10)},
        )
        ar = await self._agent.run(pt)
        return _serialize_agent_result(ar)


class ExploitWebAgent(_PentestWrapper):
    def __init__(self, config: AgentConfig, knowledge_graph_url: str):
        super().__init__(config, knowledge_graph_url)
        self._agent = ExploitAgent(tools=[SimpleCLIToolAdapter(name="sqlmap", base_cmd=["sqlmap"])])

    async def execute(self, task: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        urls = task.get("urls", [])
        pt = PentestTask(
            id=task.get("id", "exploit"),
            type=TaskType.EXPLOIT,
            target=self._target_from(context),
            urls=urls,
        )
        ar = await self._agent.run(pt)
        return _serialize_agent_result(ar)


class AnalysisWebAgent(_PentestWrapper):
    def __init__(self, config: AgentConfig, knowledge_graph_url: str):
        super().__init__(config, knowledge_graph_url)
        self._agent = AnalysisAgent()

    async def execute(self, task: Dict[str, Any], context: Dict[str, Any]) -> Dict[str, Any]:
        findings = task.get("findings", []) or context.get("findings", [])
        pt = PentestTask(
            id=task.get("id", "analysis"),
            type=TaskType.ANALYZE,
            target=self._target_from(context),
            hints={"findings": findings},
        )
        ar = await self._agent.run(pt)
        return _serialize_agent_result(ar)


def register_pentest_agents(spawner: AgentSpawner) -> None:
    spawner.register_agent(
        "recon_web",
        ReconWebAgent,
        AgentConfig(
            name="recon_web",
            capabilities=["crawl", "ffuf"],
            max_concurrency=3,
            timeout=600,
        ),
    )
    spawner.register_agent(
        "scan_web",
        ScanWebAgent,
        AgentConfig(
            name="scan_web",
            capabilities=["xss_probe", "sqli_probe", "sqlmap_detect"],
            max_concurrency=3,
            timeout=600,
        ),
    )
    spawner.register_agent(
        "exploit_web",
        ExploitWebAgent,
        AgentConfig(
            name="exploit_web",
            capabilities=["sqlmap_exploit_min"],
            max_concurrency=1,
            timeout=900,
        ),
    )
    spawner.register_agent(
        "analysis_web",
        AnalysisWebAgent,
        AgentConfig(
            name="analysis_web",
            capabilities=["dedupe", "severity", "report"],
            max_concurrency=1,
            timeout=300,
        ),
    )


__all__ = [
    "register_pentest_agents",
    "ReconWebAgent",
    "ScanWebAgent",
    "ExploitWebAgent",
    "AnalysisWebAgent",
]
